// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Channel {
    id       String    @id @default(auto()) @map("_id") @db.ObjectId
    streamer String    @unique
    avatar   String?
    seId     String?
    videoIds String[]  @db.ObjectId
    videos   Video[]
    terms    Term[]
    hashtags Hashtag[]
}

model Emote {
    id      String  @id @default(auto()) @map("_id") @db.ObjectId
    emojiId String  @unique
    name    String
    gif     Boolean
    type    String
    url1    String?
    url2    String?
    url3    String?
    terms   Term[]
}

model Video {
    id           String        @id @default(auto()) @map("_id") @db.ObjectId
    channelId    String        @db.ObjectId
    videoId      Int           @unique @db.Int
    url          String
    description  String
    duration     String
    title        String
    thumbnail    String
    streamer     String
    views        Int
    language     String
    date         String
    createdAt    String
    comments     Msg[]
    Cards        Card[]
    commentCards CommentCard[]
    complete     Boolean       @default(false)
    Channel      Channel       @relation(fields: [channelId], references: [id])
}

model Hashtag {
    id        String @id @default(auto()) @map("_id") @db.ObjectId
    channelId String @db.ObjectId

    hashtag String
    amount  Int

    Channel Channel @relation(fields: [channelId], references: [id])
}

model Term {
    id        String  @id @default(auto()) @map("_id") @db.ObjectId
    channelId String  @db.ObjectId
    emojiId   String  @unique
    term      String
    amount    Int
    type      String
    Channel   Channel @relation(fields: [channelId], references: [id])
    Emote     Emote?  @relation(fields: [emojiId], references: [emojiId])
}

model Card {
    id          String        @id @default(auto()) @map("_id") @db.ObjectId
    vidId       String        @db.ObjectId
    keyword     String
    interval    Int
    average     Int?
    CommentCard CommentCard[]
    Video       Video         @relation(fields: [vidId], references: [id])
}

model CommentCard {
    id                   String   @id @default(auto()) @map("_id") @db.ObjectId
    timestamp            String
    contentOffsetSeconds Int
    count                Int
    cardId               String   @db.ObjectId
    vidId                String   @db.ObjectId
    msgIds               String[] @db.ObjectId
    card                 Card     @relation(fields: [cardId], references: [id])
    video                Video    @relation(fields: [vidId], references: [id])
    messages             Msg[]    @relation(fields: [msgIds], references: [id])
}

model Msg {
    id                   String        @id @default(auto()) @map("_id") @db.ObjectId
    vidId                String        @db.ObjectId
    cardIds              String[]      @db.ObjectId
    message              String
    commentId            String        @unique
    commenter            String?
    contentOffsetSeconds Int
    Video                Video         @relation(fields: [vidId], references: [id])
    commentCards         CommentCard[] @relation(fields: [cardIds], references: [id])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
